[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = 'call echodoc#enable()'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_source = '''
#   let g:deoplete#enable_at_startup = 1
#   source ~/.config/nvim/rc/plugins/deoplete.rc.vim
# '''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
on_ft = 'snippet'
hook_add = '''
  " imap <silent>L     <Plug>(neosnippet_jump_or_expand)
  " smap <silent>L     <Plug>(neosnippet_jump_or_expand)
  " xmap <silent>L     <Plug>(neosnippet_expand_target)
  " imap <silent>K     <Plug>(neosnippet_expand_or_jump)
  " smap <silent>K     <Plug>(neosnippet_expand_or_jump)
  " imap <silent>G     <Plug>(neosnippet_expand)
  " xmap <silent>o     <Plug>(neosnippet_register_oneshot_snippet)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1

  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = '~/.vim/snippets'

  inoremap <silent> (( <C-r>=neosnippet#anonymous('\left(${1}\right)${0}')<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_if = 1

[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = 'let g:vinarise_enable_auto_detect = 1'

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'LeafCage/foldCC'
on_ft = 'vim'

[[plugins]]
repo = 'thinca/vim-scouter'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['deoplete.nvim']

# [[plugins]]
# repo = 'yonchu/accelerated-smooth-scroll'
# on_path = '.*'
# hook_add = '''
#   let g:ac_smooth_scroll_enable_accelerating = 0
# '''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = 'xmap p <Plug>(operator-replace)'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>ys <Plug>(operator-surround-append)a
  nmap <silent>ds <Plug>(operator-surround-delete)a
  nmap <silent>cs <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
depends = 'vim-textobj-user'
on_map = {ox = '<Plug>'}

[[plugins]]
repo = 'saihoooooooo/glowshi-ft.vim'
on_map = '<Plug>'
hook_add = '''
  let g:glowshi_ft_no_default_key_mappings = 1
  map f <Plug>(glowshi-ft-f)
  map F <Plug>(glowshi-ft-F)

  let g:glowshi_ft_timeoutlen = 1000
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'
on_if = 1
hook_add = '''
  " Note: It is too slow.
  " autocmd MyAutoCmd BufRead * Findent! --no-warnings
  nnoremap <silent> [Space]i    :<C-u>Findent! --no-warnings<CR>
'''
[[plugins]]
repo = 'Konfekt/FastFold'
on_path = '.*'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Plug>'
hook_add = '''
  nmap s <Plug>(easymotion-s2)
  xmap s <Plug>(easymotion-s2)
  omap z <Plug>(easymotion-s2)
  nmap g/ <Plug>(easymotion-sn)
  xmap g/ <Plug>(easymotion-sn)
  omap g/ <Plug>(easymotion-tn)
  let g:EasyMotion_smartcase = 1
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
  let g:EasyMotion_startofline = 0
  let g:EasyMotion_keys = 'QZASDFGHJKL'
  let g:EasyMotion_use_upper = 1
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_use_migemo = 0

  hi link EasyMotionTarget Special
  hi link EasyMotionShade  Comment
  hi link EasyMotionTarget2First Type
  hi link EasyMotionTarget2Second Type
'''

# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_source = '''
#   let g:precious_enable_switch_CursorMoved = { '*': 0 }
#   autocmd MyAutoGroup InsertEnter * PreciousSwitch
#   autocmd MyAutoGroup InsertLeave * PreciousReset
# '''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>'

[[plugins]]
repo = 'kana/vim-smartword'
on_map = '<Plug>'
hook_add = '''
  map w <Plug>(smartword-w)
  map b <Plug>(smartword-b)
  map e <Plug>(smartword-e)
  map ge <Plug>(smartword-ge)
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_path = '.*'
hook_add = '''
  let g:gitgutter_realtime = 0
  let g:gitgutter_eager = 0
  nnoremap <Leader>gg :<C-u>GitGutterToggle<CR>
  nnoremap <Leader>gh :<C-u>GitGutterLineHighlightsToggle<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
on_path = '.*'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'javascript']
hook_add = '''
let g:user_emmet_leader_key = '<C-E>'
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['html', 'css', 'less', 'scss']

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_path = '.*'

[[plugins]]
repo = 'itspriddle/vim-marked'
on_ft = 'markdown'
hook_add = '''
  if has('mac')
    let g:marked_app = "Marked 2"
  endif
'''

# [[plugins]]
# repo = 'Valloric/MatchTagAlways'
# on_ft = ['html', 'xhtml', 'xml', 'jinja', 'php']
# hook_add = '''
#   let g:mta_filetypes = {
#         \ 'html' : 1,
#         \ 'xhtml' : 1,
#         \ 'xml' : 1,
#         \ 'jinja' : 1,
#         \ 'php' : 1,
#         \}
# autocmd VimEnter,WinEnter,BufRead * hi MatchParen ctermfg=248 ctermbg=23 guifg=black guibg=lightgreen
#   nnoremap <leader>% :MtaJumpToOtherTag<cr>
#   " let g:mta_use_matchparen_group = 0
#   " let g:mta_set_default_matchtag_color = 0
#   " autocmd VimEnter,WinEnter,BufRead * highlight MatchTag ctermfg=248 ctermbg=23 guifg=black guibg=lightgreen
# '''
